diff --git a/drivers/video/fbdev/core/bitblit.c b/drivers/video/fbdev/core/bitblit.c
index 8587c9d..599ab37 100644
--- a/drivers/video/fbdev/core/bitblit.c
+++ b/drivers/video/fbdev/core/bitblit.c
@@ -16,6 +16,7 @@
 #include <linux/fb.h>
 #include <linux/vt_kern.h>
 #include <linux/console.h>
+#include <linux/font.h>
 #include <asm/types.h>
 #include "fbcon.h"
 
@@ -43,6 +44,51 @@ static void update_attr(u8 *dst, u8 *src, int attribute,
 	}
 }
 
+u16 utf8_pos(struct vc_data *vc, const u16 *s)
+{
+	unsigned long p = (unsigned long) s;
+
+	if (p >= vc->vc_origin && p < vc->vc_scr_end)
+		return scr_readw((u16 *) (p + vc->vc_screenbuf_size));
+	else
+		return scr_readw(s + 1);
+}
+
+u8 *font_bits(struct vc_data *vc, const u16 *s, u32 cellsize, u16 charmask,
+	struct fbcon_ops *ops)
+{
+	u8 *src;
+	u16 c_utf;
+	u32 cellsize_utf = (cellsize < 64) ? 16 : 64;
+	void *fontdata;
+	char *fontname = (cellsize < 64) ? "CJK16x16" : "CJK32x32";
+	const struct font_desc *font;
+
+	fontdata = ops ? ops->fontbuffer : vc->vc_font.data;
+	src = fontdata + (scr_readw(s) & charmask) * cellsize;
+	if ((scr_readw(s) & charmask) != 0xff && (scr_readw(s) & charmask) != 0xfe)
+		return src;
+
+	/* assume current font not support unicode */
+	if (vc->vc_font.charcount < 65536) {
+		if (ops)
+			fontdata = ops->fontbuffer_utf;
+		else {
+			font = find_font(fontname);
+			fontdata = (font && font->data) ? (void *) font->data : NULL;
+		}
+	}
+	if (fontdata) {
+		c_utf = utf8_pos(vc, s);
+		if ((scr_readw(s) & charmask) == 0xff)
+			src = fontdata + (c_utf * cellsize_utf * 2);
+		else
+			src = fontdata + (c_utf * cellsize_utf * 2 + cellsize_utf);
+	}
+
+	return src;
+}
+
 static void bit_bmove(struct vc_data *vc, struct fb_info *info, int sy,
 		      int sx, int dy, int dx, int height, int width)
 {
@@ -84,8 +130,7 @@ static inline void bit_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
+		src = font_bits(vc, s++, cellsize, charmask, NULL);
 
 		if (attr) {
 			update_attr(buf, src, attr, vc);
@@ -119,8 +164,7 @@ static inline void bit_putcs_unaligned(struct vc_data *vc,
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
+		src = font_bits(vc, s++, cellsize, charmask, NULL);
 
 		if (attr) {
 			update_attr(buf, src, attr, vc);
@@ -252,7 +296,7 @@ static void bit_cursor(struct vc_data *vc, struct fb_info *info, int mode,
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = vc->vc_font.data + ((c & charmask) * (w * vc->vc_font.height));
+	src = font_bits(vc, (u16 *) vc->vc_pos, (w * vc->vc_font.height), charmask, NULL);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff --git a/drivers/video/fbdev/core/fbcon.c b/drivers/video/fbdev/core/fbcon.c
index f157a5a..90f335d 100644
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@ -1050,7 +1050,7 @@ static void fbcon_init(struct vc_data *vc, int init)
 
 	vc->vc_can_do_color = (fb_get_color_depth(&info->var, &info->fix)!=1);
 	vc->vc_complement_mask = vc->vc_can_do_color ? 0x7700 : 0x0800;
-	if (vc->vc_font.charcount == 256) {
+	if (vc->vc_font.charcount != 512) {
 		vc->vc_hi_font_mask = 0;
 	} else {
 		vc->vc_hi_font_mask = 0x100;
@@ -1286,10 +1286,11 @@ static void fbcon_putcs(struct vc_data *vc, const unsigned short *s,
 
 static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
 {
-	unsigned short chr;
+	unsigned short sc[2];
 
-	scr_writew(c, &chr);
-	fbcon_putcs(vc, &chr, 1, ypos, xpos);
+	sc[0] = (unsigned short) c;
+	sc[1] = (unsigned short) (c >> 16);
+	fbcon_putcs(vc, sc, 1, ypos, xpos);
 }
 
 static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
@@ -1371,7 +1372,7 @@ static void fbcon_set_disp(struct fb_info *info, struct fb_var_screeninfo *var,
 	ops->var = info->var;
 	vc->vc_can_do_color = (fb_get_color_depth(&info->var, &info->fix)!=1);
 	vc->vc_complement_mask = vc->vc_can_do_color ? 0x7700 : 0x0800;
-	if (vc->vc_font.charcount == 256) {
+	if (vc->vc_font.charcount != 512) {
 		vc->vc_hi_font_mask = 0;
 	} else {
 		vc->vc_hi_font_mask = 0x100;
@@ -1594,6 +1595,8 @@ static void fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info,
 			}
 
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)),
+				d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -1615,6 +1618,7 @@ static void fbcon_redraw_blit(struct vc_data *vc, struct fb_info *info,
 
 static void fbcon_redraw(struct vc_data *vc, int line, int count, int offset)
 {
+	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
 	unsigned short *d = (unsigned short *)
 	    (vc->vc_origin + vc->vc_size_row * line);
 	unsigned short *s = d + offset;
@@ -1637,18 +1641,24 @@ static void fbcon_redraw(struct vc_data *vc, int line, int count, int offset)
 					start = s;
 				}
 			}
-			if (c == scr_readw(d)) {
-				if (s > start) {
-					fbcon_putcs(vc, start, s - start,
-						     line, x);
-					x += s - start + 1;
-					start = s + 1;
-				} else {
-					x++;
-					start++;
+			if (((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe)
+				&& scr_readw(s + (vc->vc_screenbuf_size >> 1))) {
+			} else {
+				if (c == scr_readw(d)) {
+					if (s > start) {
+						fbcon_putcs(vc, start, s - start,
+							     line, x);
+						x += s - start + 1;
+						start = s + 1;
+					} else {
+						x++;
+						start++;
+					}
 				}
 			}
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)),
+				d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -2140,7 +2150,7 @@ static int fbcon_switch(struct vc_data *vc)
 	vc->vc_can_do_color = (fb_get_color_depth(&info->var, &info->fix)!=1);
 	vc->vc_complement_mask = vc->vc_can_do_color ? 0x7700 : 0x0800;
 
-	if (vc->vc_font.charcount > 256)
+	if (vc->vc_font.charcount == 512)
 		vc->vc_complement_mask <<= 1;
 
 	updatescrollmode(p, info, vc);
@@ -2596,6 +2606,11 @@ static void fbcon_set_palette(struct vc_data *vc, const unsigned char *table)
 
 static u16 *fbcon_screen_pos(const struct vc_data *vc, int offset)
 {
+	if (offset < 0) {
+		offset = -offset - 1;
+		return (u16 *) (vc->vc_origin + offset + (vc->vc_screenbuf_size));
+	}
+
 	return (u16 *) (vc->vc_origin + offset);
 }
 
diff --git a/drivers/video/fbdev/core/fbcon.h b/drivers/video/fbdev/core/fbcon.h
index 0eaf54a..1e38d92 100644
--- a/drivers/video/fbdev/core/fbcon.h
+++ b/drivers/video/fbdev/core/fbcon.h
@@ -82,10 +82,12 @@ struct fbcon_ops {
 	int    cur_rotate;
 	char  *cursor_data;
 	u8    *fontbuffer;
+	u8    *fontbuffer_utf;
 	u8    *fontdata;
 	u8    *cursor_src;
 	u32    cursor_size;
 	u32    fd_size;
+	u32    fd_size_utf;
 };
     /*
      *  Attribute Decoding
diff --git a/drivers/video/fbdev/core/fbcon_ccw.c b/drivers/video/fbdev/core/fbcon_ccw.c
index 2789ace..ec68dbc 100644
--- a/drivers/video/fbdev/core/fbcon_ccw.c
+++ b/drivers/video/fbdev/core/fbcon_ccw.c
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 *font_bits(struct vc_data *vc, const u16 *s, u32 cellsize,
+		u16 charmask, struct fbcon_ops *ops);
 /*
  * Rotation 270 degrees
  */
@@ -106,7 +108,7 @@ static inline void ccw_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
+		src = font_bits(vc, s--, cellsize, charmask, ops);
 
 		if (attr) {
 			ccw_update_attr(buf, src, attr, vc);
@@ -238,7 +240,7 @@ static void ccw_cursor(struct vc_data *vc, struct fb_info *info, int mode,
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	src = font_bits(vc, (u16 *) vc->vc_pos, (w * vc->vc_font.width), charmask, ops);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff --git a/drivers/video/fbdev/core/fbcon_cw.c b/drivers/video/fbdev/core/fbcon_cw.c
index 86a254c..565cda9 100644
--- a/drivers/video/fbdev/core/fbcon_cw.c
+++ b/drivers/video/fbdev/core/fbcon_cw.c
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 *font_bits(struct vc_data *vc, const u16 *s, u32 cellsize,
+		u16 charmask, struct fbcon_ops *ops);
 /*
  * Rotation 90 degrees
  */
@@ -91,7 +93,7 @@ static inline void cw_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s++) & charmask)*cellsize;
+		src = font_bits(vc, s++, cellsize, charmask, ops);
 
 		if (attr) {
 			cw_update_attr(buf, src, attr, vc);
@@ -221,7 +223,7 @@ static void cw_cursor(struct vc_data *vc, struct fb_info *info, int mode,
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	src = font_bits(vc, (u16 *) vc->vc_pos, (w * vc->vc_font.width), charmask, ops);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff --git a/drivers/video/fbdev/core/fbcon_rotate.c b/drivers/video/fbdev/core/fbcon_rotate.c
index ec3c883..d549b08 100644
--- a/drivers/video/fbdev/core/fbcon_rotate.c
+++ b/drivers/video/fbdev/core/fbcon_rotate.c
@@ -14,10 +14,74 @@
 #include <linux/fb.h>
 #include <linux/vt_kern.h>
 #include <linux/console.h>
+#include <linux/font.h>
 #include <asm/types.h>
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+static int fbcon_rotate_font_utf(struct fb_info *info, struct vc_data *vc)
+{
+	struct fbcon_ops *ops = info->fbcon_par;
+	int len, err = 0;
+	int s_cellsize, d_cellsize, i;
+	const u8 *src;
+	u8 *dst;
+
+	int cellsize = ((vc->vc_font.width + 7)/8) * vc->vc_font.height;
+	char *fontname = (cellsize < 64) ? "CJK16x16" : "CJK32x32";
+	const struct font_desc *font = find_font(fontname);
+
+	if (!font || !font->data)
+		return err;
+
+	src = font->data;
+	len = font->charcount;
+	s_cellsize = ((font->width + 7)/8) * font->height;
+	d_cellsize = s_cellsize;
+
+	if (ops->fd_size_utf < d_cellsize * len) {
+		dst = kvmalloc_array(len, d_cellsize, GFP_KERNEL | __GFP_RETRY_MAYFAIL);
+
+		if (dst == NULL) {
+			err = -ENOMEM;
+			return err;
+		}
+
+		ops->fd_size_utf = d_cellsize * len;
+		kvfree(ops->fontbuffer_utf);
+		ops->fontbuffer_utf = dst;
+	}
+
+	dst = ops->fontbuffer_utf;
+	memset(dst, 0, ops->fd_size_utf);
+
+	switch (ops->rotate) {
+	case FB_ROTATE_UD:
+		for (i = len; i--; ) {
+			rotate_ud(src, dst, font->width, font->height);
+			src += s_cellsize;
+			dst += d_cellsize;
+		}
+		break;
+	case FB_ROTATE_CW:
+		for (i = len; i--; ) {
+			rotate_cw(src, dst, font->width, font->height);
+			src += s_cellsize;
+			dst += d_cellsize;
+		}
+		break;
+	case FB_ROTATE_CCW:
+		for (i = len; i--; ) {
+			rotate_ccw(src, dst, font->width, font->height);
+			src += s_cellsize;
+			dst += d_cellsize;
+		}
+		break;
+	}
+
+	return err;
+}
+
 static int fbcon_rotate_font(struct fb_info *info, struct vc_data *vc)
 {
 	struct fbcon_ops *ops = info->fbcon_par;
@@ -46,7 +110,7 @@ static int fbcon_rotate_font(struct fb_info *info, struct vc_data *vc)
 		info->fbops->fb_sync(info);
 
 	if (ops->fd_size < d_cellsize * len) {
-		dst = kmalloc_array(len, d_cellsize, GFP_KERNEL);
+		dst = kvmalloc_array(len, d_cellsize, GFP_KERNEL | __GFP_RETRY_MAYFAIL);
 
 		if (dst == NULL) {
 			err = -ENOMEM;
@@ -54,7 +118,7 @@ static int fbcon_rotate_font(struct fb_info *info, struct vc_data *vc)
 		}
 
 		ops->fd_size = d_cellsize * len;
-		kfree(ops->fontbuffer);
+		kvfree(ops->fontbuffer);
 		ops->fontbuffer = dst;
 	}
 
@@ -89,6 +153,9 @@ static int fbcon_rotate_font(struct fb_info *info, struct vc_data *vc)
 		break;
 	}
 
+	if (ops->p->userfont)
+		fbcon_rotate_font_utf(info, vc);
+
 finished:
 	return err;
 }
diff --git a/drivers/video/fbdev/core/fbcon_ud.c b/drivers/video/fbdev/core/fbcon_ud.c
index 23bc045..6e7eaa5 100644
--- a/drivers/video/fbdev/core/fbcon_ud.c
+++ b/drivers/video/fbdev/core/fbcon_ud.c
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 *font_bits(struct vc_data *vc, const u16 *s, u32 cellsize,
+		u16 charmask, struct fbcon_ops *ops);
 /*
  * Rotation 180 degrees
  */
@@ -93,7 +95,7 @@ static inline void ud_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
+		src = font_bits(vc, s--, cellsize, charmask, ops);
 
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
@@ -128,7 +130,7 @@ static inline void ud_putcs_unaligned(struct vc_data *vc,
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
+		src = font_bits(vc, s--, cellsize, charmask, ops);
 
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
@@ -269,7 +271,7 @@ static void ud_cursor(struct vc_data *vc, struct fb_info *info, int mode,
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
+	src = font_bits(vc, (u16 *) vc->vc_pos, (w * vc->vc_font.height), charmask, ops);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
